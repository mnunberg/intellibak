#!/usr/bin/env python2.6
import os
import threading
import sys
from subprocess import Popen, PIPE
from tarfile import TarFile
from tempfile import mkdtemp
from time  import sleep
from collections import defaultdict

class FSCopyError(Exception): pass
class FSCopy(object):

    """
    Provides common exception handling for fs copy objects, cleanup is supposed
    to run when the copy function terminates or has an exception raised
    """
    exception_list = (Exception,)
    _persistent_vars = defaultdict(lambda: None)
    
    def __call__(self, inpath, outpath, **kwargs):
        try:
            self.fscopy(inpath, outpath, **kwargs)
        finally:
            self.cleanup()
    __init__ = __call__

class MountError(Exception): pass


class TarArchive(FSCopy):
    def fscopy(self, path, outfile, **noargs):
        """
        Path is a filesystem which is mountable, outfile is a file object
        """
        self._persistent_vars['bytes_read'] = 0
        def _progress(tar_obj, parent_thread):
            #Get used space:        
            stat_result = os.statvfs(self._persistent_vars['mountpoint'])
            #estimate inode usage:
            inode_cruft_mb = (stat_result.f_files * 128) // 1024**2
            used_size_mb = ((stat_result.f_blocks - stat_result.f_bfree) * stat_result.f_bsize) // (1024**2)
            used_size_mb -= inode_cruft_mb
            
            while parent_thread.isAlive() and self._persistent_vars['progress']:
                sleep(0.3)
                sys.stdout.write("{0:60}\r".format(""))
                sys.stdout.write("{0}/{1} MB".format(
                    self._persistent_vars['bytes_read'] // 1024**2 ,used_size_mb))
                sys.stdout.flush()
            sys.stdout.write("\n")
            sys.stdout.flush()
            
        def _taradd(t_obj,dirname,fnames):
            for name in fnames:
                name = os.path.join(dirname, name)
                if os.path.isdir(name):
                    t_info = t_obj.gettarinfo(name)
                    t_obj.addfile(t_info)
                else:
                    try:
                        f = open(name, "rb")
                        self._persistent_vars['f'] = f
                        t_info = t_obj.gettarinfo(fileobj=f)
                        t_obj.addfile(t_info,f)
                        self._persistent_vars['bytes_read'] += t_info.size
                    finally:
                        if f:
                            f.close()
                    
            
        t = TarFile.open(fileobj = outfile, mode = "w|")
        mountpoint = mkdtemp()
        
        self._persistent_vars['mountpoint'] = mountpoint
        
        p = Popen(
            ["/bin/mount", path, mountpoint, '-o', 'ro'], stderr = PIPE)
        stdout, stderr = p.communicate()
        print "MOUNTED"
        if p.returncode != 0:
            raise MountError(stderr)
            
        self._persistent_vars['tar_obj'] = t
        self._persistent_vars['outfile'] = outfile
        
        os.chdir(mountpoint)
        
        progress_th = None
        if os.isatty(sys.stdout.fileno()):
            self._persistent_vars['progress'] = True
            
        parent_thread = threading.currentThread()
        progress_th = threading.Thread(target=_progress,
                                       name="progress",
                                       args=(t, parent_thread)
                                      )
        progress_th.start()
        
        os.path.walk(".", _taradd, t)
    
    def cleanup(self):
        #Stop the progress counter, it will quite on the next iteration
        self._persistent_vars['progress'] = False
        
        os.chdir('/tmp')
        if self._persistent_vars['tar_obj']:
            try:
                self._persistent_vars['tar_obj'].close()
            except IOError as err:
                print "Warning! Tar archive will be corrupted! :", err
                try :
                    self._persistent_vars['f'].close()
                except (IOError, OSError, AttributeError, ValueError) as err:
                    print err
        
        if self._persistent_vars['outfile']:
            self._persistent_vars['outfile'].close()
        
        if not self._persistent_vars['mountpoint']:
            return
        
        p = Popen(['mountpoint', '-q', self._persistent_vars['mountpoint']])
        p.communicate()
        rt = p.returncode
        
        if rt == 0:
            p = Popen(['umount', self._persistent_vars['mountpoint']],
                                     stderr = PIPE)
            um_stdout, um_stderr = p.communicate()
            if p.returncode != 0:
                lsof = Popen(['lsof', '-n'], stdout=PIPE)
                lsof_stdout, lsof_stderr = lsof.communicate()
                for line in lsof_stdout.split("\n"):
                    if self._persistent_vars['mountpoint'] in line:
                        print line
                raise OSError(um_stderr)
    
        
        if self._persistent_vars['mountpoint']:
            os.rmdir(self._persistent_vars['mountpoint'])
    
    suffix = "tar"

if __name__ == "__main__":
    f = open("/stuff/foo.tar", "wb")
    TarArchive("/dev/xen-vg/kevin_disk", f)
    f.close()
